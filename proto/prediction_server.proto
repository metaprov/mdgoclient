syntax = "proto3";

package pkg.client;

option go_package = "github.com/metaprov/mdgoclient/gen/api";


// On any input that is documented to expect a string parameter in
// snake_case or kebab-case, either of those cases is accepted.
service PredictionServer {

  rpc Predict(PredictionRequest) returns (PredictionResponse) {
  }

  rpc BatchPredict(BatchPredictRequest) returns (BatchPredictResponse) {
  }

  rpc Alive(AliveRequest) returns (AliveResponse) {
  }

  rpc Ready(ReadyRequest) returns (ReadyResponse) {
  }


  rpc GetProduct(GetProductRequest) returns (GetProductResponse) {
  }

  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse) {
  }

  rpc GetDataset(GetDatasetRequest) returns (GetDatasetResponse) {
  }

  rpc GetModel(GetModelRequest) returns (GetModelResponse) {
  }

  rpc GetStat(GetStatRequest) returns (GetStatResponse) {
  }


}

message PredictionRequest {
     string name             = 1;  // model name
     string columns          = 2;  // json columns
     string features         = 3;  // json string of features.
     bool full               = 4;  // return the features and the predicted label, vs just the predictions.
}

message PredictionResponse {
     string columns  = 1;
     string labels   = 2; // json labels.
}


message BatchPredictRequest {
    string url = 1;
}

message BatchPredictResponse {
     string labels   = 1;
}



message AliveRequest {

}

message AliveResponse {
}

message ReadyRequest {
}

message ReadyResponse {
}

message GetProductRequest {

}

message GetProductResponse {
    string content = 1;
}

message GetSchemaRequest {

}

message GetSchemaResponse {
    string content = 1;
}

message GetDatasetRequest {

}

message GetDatasetResponse {
    string content = 1;
}

message GetModelRequest {

}

message GetModelResponse {
    string content = 1;
}

message GetStatRequest {

}

message GetStatResponse {
    string content = 1;
}

